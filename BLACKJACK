##BLACKJACK
import random
suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Jack','Queen','King','Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10, 'Queen':10, 'King':10, 'Ace':11}






##objects
class Card():
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        self.value = values[rank]

    def __str__(self):
        return(f" {self.rank} of {self.suit} ")
class Deck():
    def __init__(self):
        self.all_cards = []
        for suit in suits:
            for rank in ranks:
                #ADD CARDS TO DECK
                self.all_cards.append(Card(rank,suit))

    def __str__(self):
        for card in self.all_cards():
            deck_comp += '\n' + card.__str__()
        return "The deck has:" + deck_comp

    def shuffle(self):
        #shuffle DECK
        print("Deck will now be shuffled!")
        random.shuffle(self.all_cards)

    def deal_one(self):
        return self.all_cards.pop()
class Hand():
    def __init__(self):
        self.value = 0
        self.current = []
        self.aces = 0

    def add_cards(self, new_card):
        #single card only
        self.current.append(new_card)
        self.value += new_card.value
        if new_card.rank == 'Ace':
            self.aces += 1

    def adjust_for_ace(self):

        #if it busts, decrease ace to value 1 if you have an ace in hand
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces -= 1
class Chips():
    def __init__(self, balance):
        self.total = balance
        self.bet = 0

    def win_bet(self):
        self.total += self.bet

    def lose_bet(self):
        self.total -= self.bet







#game functions
def take_bet(chips):
    while True:

        try:
            chips.bet = int(input("How many chips would you like to bet? :  "))
        except:
            print("Please provide an integer!")
        else:
            if chips.bet > chips.total:
                print("Insufficient Funds!")
            else:
                print(f"Added {chips.bet} to the pool!")
                break
def hit(deck, hand):
    hand.add_cards(deck.deal_one())
    hand.adjust_for_ace()
def hit_or_stand(deck,hand):
    global playing

    while True:
        x = input('Hit or Stand? (h/s):   ')
        if x[0].lower() == 'h':
            hit(deck,hand)

        elif x[0].lower() =='s':
            print("Player Stands! Dealer's Turn.")
            playing = False

        else:
            print("Invalid CHOICE")
            continue

        break
def show_some(hand_dealer, hand_player):
    print(f"\n Dealer has a {hand_dealer.current[0]}")
    print("The second card is hidden!")

    print(f"\n Player has :")
    for card in hand_player.current:
        print(card)
def show_all(hand_dealer, hand_player):
    print("\nThe Dealer has:")
    for cards in hand_dealer.current:
        print(cards)
    print(f"Dealer's hand value is {hand_dealer.value}")

    print("\nYou have: ")
    for card in hand_player.current:
        print(card)
    print(f"Your hand value is {hand_player.value}")
#end_game scenarios
def player_bust(player,dealer,chips):
    print("You BUSTED!")
    chips.lose_bet()
def player_wins(player,dealer,chips):
    print("You WIN!")
    chips.win_bet()
def dealer_bust(player,dealer,chips):
    print("Dealer BUSTED! You WIN!")
    chips.win_bet()
def dealer_wins(player,dealer,chips):
    print("Dealer WINS! You LOSE!")
    chips.lose_bet()
def push(player, dealer):
    print("It's a tie! PUSH")





#game logic
while True:
    choice = ''
    while choice != 'y' and choice != 'n':
        choice = input("Wanna play BLACK JACK? (y/n):   ")

    if choice == 'y':
        game_on = True
        player_chips = Chips(1000) #give 1000  chips to player

    else:
        game_on =  False

    while game_on == True:
        deck = Deck() #create deck
        deck.shuffle() #shuffle deck
        player_hand = Hand() #create player's hand
        dealer_hand = Hand() #create dealer's hand
        print(f"You now have {player_chips.total} chips!") #tell player
        take_bet(player_chips) #ask for player bet

        #deal cards to player's hand
        player_hand.add_cards(deck.deal_one())
        player_hand.add_cards(deck.deal_one())
        #ace adjust
        player_hand.adjust_for_ace()

        #deal cards to dealer's hand
        dealer_hand.add_cards(deck.deal_one())
        dealer_hand.add_cards(deck.deal_one())
        #ace adjust
        dealer_hand.adjust_for_ace()

        #show some card
        show_some(dealer_hand, player_hand)

        playing = True
        #PLAYER TURN LOOP
        while playing:
            #player decide
            hit_or_stand(deck, player_hand)
            show_some(dealer_hand, player_hand)
            if player_hand.value > 21:
                player_bust(player_hand, dealer_hand, player_chips)
                playing = False
            else:
                continue

        if player_hand.value <= 21:
            while dealer_hand.value <= 17:
                hit(deck, dealer_hand)

            show_all(dealer_hand, player_hand)

            if dealer_hand.value > 21:
                dealer_bust(player_hand, dealer_hand, player_chips)
            elif dealer_hand.value > player_hand.value:
                dealer_wins(player_hand, dealer_hand, player_chips)
            elif dealer_hand.value < player_hand.value:
                player_wins(player_hand, dealer_hand, player_chips)
            else:
                push(player_hand, dealer_hand)

        print(f"Your balance is now {player_chips.total}")
        if player_chips.total == 0:
            break

        more = ' '
        while more[0].lower() != 'y' and more[0].lower() != 'n':
            more = input("wanna continue playing? (y/n)")

        if more[0].lower() == 'y':
            playing = True
            continue

        elif more[0].lower() == 'n':
            game_on = False


    print("Thanks for playing!")
    if player_chips.total == 0:
        print("You ran out of chips!")
        print("Thanks for playing!")
    break
